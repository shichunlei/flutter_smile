import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static S current;

  static const GeneratedLocalizationsDelegate delegate =
    GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get ENGLISH => "English";
  String get FOLLOW_SYSTEM => "Follow System";
  String get SIMPLIFIED_CHINESE => "Simplified Chinese";
  String get addMoodStory => "Add your mood story here!";
  String get anger => "Anger";
  String get anxiety => "Anxiety";
  String get camera => "Camera";
  String get cancel => "Cancel";
  String get changeScreenLock => "Change Screen Lock";
  String get clear => "Clear";
  String get confirm => "Confirm";
  String get confirmPassword => "Confirm password";
  String get connectLeastFourDots => "Connect at least 4 dots. Try again.";
  String get day => "Day";
  String get days => "Days";
  String get delete => "Dle";
  String get deleteFailed => "Delete Failed!";
  String get deletePassCode => "Are you sure you want to turn off password? password input data will be deleted and cannot be protecting the privacy of your emotional diary.";
  String get deletePhoneNumber => "Are you sure you want to delete the phone number?";
  String get deleteRecord => "Are you sure you want to delete this record?";
  String get deleteSuccess => "Delete Success!";
  String get depression => "Depression";
  String get diaryDate => "Diary Date";
  String get drawAgain => "Draw pattern again to confirm:";
  String get drawPattern => "Draw an unlock pattern:";
  String get drawing => "Release finger when done";
  String get enterCode => "Enter verify code";
  String get enterEmail => "Enter your email";
  String get enterName => "Enter your name";
  String get enterNewPassword => "Enter new password";
  String get enterOldPassword => "Enter old password";
  String get enterPassword => "Enter your password";
  String get enterPhoneNumber => "Enter your phone number";
  String get exit => "Exit Account";
  String get exitAccount => "Are you sure you want to exit the account?";
  String get exitEdit => "You edit the mood diary did not submit, are you sure you want to exit?";
  String get failed => "Failed!";
  String get first => "First";
  String get forget => "Forget password?";
  String get gallery => "Gallery";
  String get happiness => "Happiness";
  String get haveAccount => "Have an Account? ";
  String get language => "Language";
  String get loading => "Loading...";
  String get login => "Sign In";
  String get loginFailed => "Login Failed!";
  String get loginSuccess => "Login Success!";
  String get logining => "Logining...";
  String get month => "Month";
  String get moodType => "Mood Type";
  String get negative => "Negative";
  String get neutrality => "Neutrality";
  String get newPattern => "Your new unlock pattern:";
  String get no => "No";
  String get noData => "No Data";
  String get notAccount => "Don`t have an Account? ";
  String get patternRecorded => "Pattern recorded";
  String get positive => "Positive";
  String get post => "Post";
  String get pressAgain => "Press it again to exit the program";
  String get register => "Sign Up";
  String get registerFailed => "Register Failed!";
  String get registerSuccess => "Register Success!";
  String get registering => "registering...";
  String get relaxation => "Relaxation";
  String get saveFailed => "Save Failed!";
  String get saveSuccess => "Save Success!";
  String get saving => "Saving...";
  String get second => "Second";
  String get send => "Send";
  String get sendCode => "Send Code";
  String get sendFailed => "Send Failed!";
  String get sendSuccess => "Send Success!";
  String get sending => "Sending...";
  String get setPattern => "Set Pattern";
  String get submit => "Submit";
  String get success => "Success!";
  String get sure => "Sure";
  String get tabGratitude => "Gratitude";
  String get tabLine => "Line";
  String get tabMoment => "Moment";
  String get tabMood => "Mood";
  String get tabSetting => "Setting";
  String get third => "Third";
  String get tipGratitude => "What are you feeling grateful to? Note down things that make you smile!";
  String get titleAccount => "My Account";
  String get titleAddMobile => "Add Phone Number";
  String get titleChangePassword => "Change Password";
  String get titleForget => "Forget Password";
  String get titleGratitude => "Gratitude Journal";
  String get titleLine => "Emotion Line";
  String get titleMoment => "Moments";
  String get titleMood => "Mood Diary";
  String get titlePasscode => "Passcode";
  String get titleReminder => "Daily Reminder";
  String get titleSetting => "Setting";
  String get tryAgain => "Try Again:";
  String get turnOffLock => "Turn Off Lock";
  String get updateFailed => "Update Failed!";
  String get updateSuccess => "Update Success!";
  String get uploadFailed => "Upload Failed!";
  String get uploadSuccess => "Upload Success!";
  String get userEmail => "UserName";
  String get userMobile => "PhoneNumber";
  String get userName => "Name";
  String get week => "Week";
  String get yes => "Yes";
  String forgetTip(String email) => "Note: After you click Send, the system will send an email to $email, you can click the message in connection to retrieve your password.";
}

class $en extends S {
  const $en();
}

class $zh_CN extends S {
  const $zh_CN();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get cancel => "取消";
  @override
  String get pressAgain => "再按一次退出账号";
  @override
  String get changeScreenLock => "修改密码";
  @override
  String get titleGratitude => "感恩日记";
  @override
  String get titleChangePassword => "修改密码";
  @override
  String get titleAddMobile => "添加手机号码";
  @override
  String get deletePhoneNumber => "您确定要删除该账号的手机号码？";
  @override
  String get patternRecorded => "已记录图案";
  @override
  String get userMobile => "手机号码";
  @override
  String get moodType => "情绪类型";
  @override
  String get drawing => "完成后松开手指";
  @override
  String get drawPattern => "绘制解锁图案，请至少连接4个点";
  @override
  String get saveSuccess => "保存成功!";
  @override
  String get SIMPLIFIED_CHINESE => "简体中文";
  @override
  String get gallery => "相册";
  @override
  String get titleReminder => "日常提醒";
  @override
  String get sure => "确定";
  @override
  String get enterOldPassword => "请输入原密码";
  @override
  String get loginFailed => "登录失败!";
  @override
  String get relaxation => "放松";
  @override
  String get loading => "加载中...";
  @override
  String get enterPhoneNumber => "请输入手机号码";
  @override
  String get exit => "退出账号";
  @override
  String get saving => "正在保存...";
  @override
  String get loginSuccess => "登录成功!";
  @override
  String get titleMoment => "瞬间";
  @override
  String get enterCode => "请输入验证码";
  @override
  String get titleSetting => "设置";
  @override
  String get exitEdit => "你编辑的情绪日记没有提交，确认要退出吗？";
  @override
  String get titleForget => "忘记密码";
  @override
  String get logining => "正在登陆...";
  @override
  String get tabGratitude => "感激";
  @override
  String get tabLine => "曲线";
  @override
  String get login => "登录";
  @override
  String get sendFailed => "发送失败!";
  @override
  String get tabMood => "情绪";
  @override
  String get addMoodStory => "请输入心情日记！";
  @override
  String get deleteSuccess => "修改成功!";
  @override
  String get sending => "正在发送...";
  @override
  String get confirmPassword => "确认密码";
  @override
  String get userEmail => "邮箱";
  @override
  String get enterName => "请输入用户名";
  @override
  String get neutrality => "平常心";
  @override
  String get sendSuccess => "发送成功!";
  @override
  String get camera => "相机";
  @override
  String get FOLLOW_SYSTEM => "跟随系统";
  @override
  String get enterEmail => "请输入邮箱";
  @override
  String get ENGLISH => "英文";
  @override
  String get tipGratitude => "你感觉如何感激？记录下那些让你微笑的瞬间吧！";
  @override
  String get positive => "积极";
  @override
  String get drawAgain => "再次绘制图案进行确认";
  @override
  String get connectLeastFourDots => "至少需连接4个点，请重试";
  @override
  String get confirm => "确认";
  @override
  String get updateSuccess => "修改成功!";
  @override
  String get days => "天";
  @override
  String get deletePassCode => "您确定要关闭密码？关闭密码后，将删除已记录的密码数据，且无法保护您心情日记的营私。";
  @override
  String get uploadSuccess => "上传成功!";
  @override
  String get first => "第一条";
  @override
  String get register => "注册";
  @override
  String get registering => "正在注册...";
  @override
  String get language => "切换语言";
  @override
  String get anger => "愤怒";
  @override
  String get haveAccount => "你已经有账号了？ 去";
  @override
  String get second => "第二条";
  @override
  String get post => "发布";
  @override
  String get notAccount => "你还没有账号？ 去";
  @override
  String get newPattern => "您的新解锁图案";
  @override
  String get day => "日";
  @override
  String get saveFailed => "保存失败!";
  @override
  String get enterNewPassword => "请输入新密码";
  @override
  String get tryAgain => "请重试";
  @override
  String get failed => "失败!";
  @override
  String get anxiety => "焦虑";
  @override
  String get forget => "忘记密码?";
  @override
  String get diaryDate => "记录日期";
  @override
  String get month => "月";
  @override
  String get turnOffLock => "关闭密码";
  @override
  String get success => "成功!";
  @override
  String get deleteFailed => "修改失败!";
  @override
  String get send => "发送";
  @override
  String get uploadFailed => "上传失败!";
  @override
  String get titleMood => "情绪";
  @override
  String get no => "否";
  @override
  String get titleLine => "情感日记";
  @override
  String get week => "周";
  @override
  String get submit => "提交";
  @override
  String get titlePasscode => "隐私密码";
  @override
  String get sendCode => "发送验证码";
  @override
  String get delete => "删除";
  @override
  String get updateFailed => "修改失败!";
  @override
  String get negative => "消极";
  @override
  String get registerFailed => "注册失败!";
  @override
  String get happiness => "开心";
  @override
  String get setPattern => "请设置图案";
  @override
  String get tabMoment => "瞬间";
  @override
  String get titleAccount => "我的账号";
  @override
  String get registerSuccess => "注册成功!";
  @override
  String get exitAccount => "你确定要退出该账号吗？";
  @override
  String get yes => "是";
  @override
  String get clear => "重绘";
  @override
  String get userName => "昵称";
  @override
  String get enterPassword => "请输入密码";
  @override
  String get third => "第三条";
  @override
  String get noData => "暂无数据";
  @override
  String get tabSetting => "设置";
  @override
  String get depression => "抑郁";
  @override
  String get deleteRecord => "您确定要删除该条记录？";
  @override
  String forgetTip(String email) => "注：点击发送后，系统会发送一封邮件至$email，您可以点击邮件里的连接来找回密码。";
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("en", ""),
      Locale("zh", "CN"),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "en":
          S.current = const $en();
          return SynchronousFuture<S>(S.current);
        case "zh_CN":
          S.current = const $zh_CN();
          return SynchronousFuture<S>(S.current);
        default:
          // NO-OP.
      }
    }
    S.current = const S();
    return SynchronousFuture<S>(S.current);
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported, bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry && (supportedLocale.countryCode == null || supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
  ? null
  : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
